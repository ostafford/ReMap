# ReMap Development Environment
# This docker-compose.yml creates our backend services for consistent development
# backend services are connected to the same database and share the same environment variables

services:
  # Express.js Backend Service
  # This container runs our Node.js backend API that connects frontend to database
  backend:
    build:
      context: .                   # Build from project root
      dockerfile: backend/Dockerfile
    container_name: remap-container
    restart: unless-stopped        # Automatically restart if container crashes
    
    # Port mapping exposes our API to the host machine and mobile app this is how we connect to the backend
    ports:
      - "3000:3000"
      - "8081:8081"
      - "19000:19000"  # Expo Dev Server
      - "19001:19001"  # Expo Dev Server (WebSocket)
      - "19002:19002"  # Expo Dev Server (additional ports)
    
    # Environment variables for backend configuration
    environment:
      # Node.js environment settings (This is how we run the backend in development mode)
      NODE_ENV: development
      PORT: 3000
      
      # Expo CLI configuration for containerized development
      EXPO_DEVTOOLS_LISTEN_ADDRESS: lan  # Allow connections from outside container
      REACT_NATIVE_PACKAGER_HOSTNAME: ${HOST_IP:-host.docker.internal}  # Dynamic IP resolution
      
      # Android Debug Bridge configuration for mobile development
      ADB_SERVER_SOCKET: tcp:host-gateway:5037
      
    # Volume mounting for complete development environment
    # This provides access to the entire Git repository and project structure
    volumes:
      - .:/workspace                 # Mount entire project root to /workspace (we can change this later if we want to)
      - /workspace/node_modules      # Preserve container's node_modules 
      - backend_cache:/workspace/backend/node_modules  # Backend-specific node_modules cache
    
    # Working directory will be the complete project workspace
    working_dir: /workspace
    
    # Development command with enhanced project structure support
    # This essentially runs the backend in development mode and allows us to make changes to the code and see them immediately
    command: sh -c "cd /workspace/backend && npm run dev"
    
    # Health Check settings for the backend API (this is how we ensure the backend is running correctly)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s              # Check every 30 seconds
      timeout: 10s               # Wait up to 10 seconds for response
      retries: 5                 # Try 5 times before marking as unhealthy
      start_period: 60s          # Wait 60 seconds before starting health checks

# Named volumes for data persistence
# This ensures your database data survives container restarts
volumes:
  backend_cache:
    driver: local    # Cache for backend node_modules to improve build performance

# Networks for service communication
# This creates an isolated network for our services to communicate securely (container to container communication)
networks:
  default:
    name: remap-network